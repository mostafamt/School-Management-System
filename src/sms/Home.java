/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sms;

import com.sun.glass.events.KeyEvent;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

public class Home extends javax.swing.JFrame {

    private static Connection conn = null;
    private static ResultSet result;
    private static PreparedStatement pst;

    protected void resetStaff() {

        staffID.setText("");
        staffFirstName.setText("");
        staffLastName.setText("");
        staffAdd.setText("");
        staffGender.setSelectedIndex(0);
        dateOfJoinStaff.setDate(null);  //reset Date
        staffPosition.setSelectedIndex(0);
        staffMobile.setText("");
        staffEmail.setText("");

    }
    protected void resetStudents() {

        studentId.setText("");
        studentFirstName.setText("");
        studentLastName.setText("");
        studentMobile.setText("");
        studentGender.setSelectedIndex(0);
        dateOfBirthStudent.setDate(null);
        dateOfJoinStudent.setDate(null); //reset Date
        staffPosition.setSelectedIndex(0);
        studentAddress.setText("");
        studentEmail.setText("");

    }

    public Home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        staffAdd = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        staffEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        staffID = new javax.swing.JTextField();
        staffLastName = new javax.swing.JTextField();
        staffGender = new javax.swing.JComboBox<>();
        staffPosition = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        staffFirstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        staffMobile = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        deleteBtn5 = new javax.swing.JButton();
        newBtn5 = new javax.swing.JButton();
        addBtn5 = new javax.swing.JButton();
        updateBtn5 = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        changeImage = new javax.swing.JButton();
        dateOfJoinStaff = new com.toedter.calendar.JDateChooser();
        jPanel6 = new javax.swing.JPanel();
        searchStaff = new javax.swing.JTextField();
        searchStaffBtn = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        staffInfoTable = new javax.swing.JTable();
        showAllStaff = new javax.swing.JButton();
        print1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        searchStudent = new javax.swing.JTextField();
        studentSearchBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        studentId = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        studentGender = new javax.swing.JComboBox<>();
        studentAddress = new javax.swing.JTextField();
        studentFirstName = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        studentEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        studentMobile = new javax.swing.JTextField();
        studentLastName = new javax.swing.JTextField();
        dateOfJoinStudent = new com.toedter.calendar.JDateChooser();
        dateOfBirthStudent = new com.toedter.calendar.JDateChooser();
        jPanel19 = new javax.swing.JPanel();
        studentDeleteBtn = new javax.swing.JButton();
        studentSaveBtn = new javax.swing.JButton();
        studentNewBtn = new javax.swing.JButton();
        printBtn1 = new javax.swing.JButton();
        studentUpdateBtn = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        StudentsInfoTable = new javax.swing.JTable();
        showAllStudents = new javax.swing.JButton();
        print = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        addUserPassword = new javax.swing.JPasswordField();
        jLabel31 = new javax.swing.JLabel();
        addUserName = new javax.swing.JTextField();
        addUserConfirmPassword = new javax.swing.JPasswordField();
        addUserBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        searchPassBtn = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        userNameSearch = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        userInfoTable = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        deleteUserName = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        userConfirmPassword = new javax.swing.JTextField();
        userNametxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        updatePass = new javax.swing.JButton();
        userOldPassword = new javax.swing.JTextField();
        userNewPassword = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setResizable(false);

        jToolBar1.setRollover(true);

        jLabel1.setText("icon1");
        jToolBar1.add(jLabel1);

        jLabel2.setText("icon2");
        jToolBar1.add(jLabel2);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1511, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Staff Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N

        jLabel10.setText("Date Of Join");

        jLabel5.setText("First Name");

        jLabel6.setText("Last Name");

        jLabel7.setText("Mobile");

        staffGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Female", "Male", "Other" }));

        staffPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Admin", "Reception", "Teacher" }));

        jLabel4.setText("Gender");

        jLabel9.setText("Address");

        jLabel11.setText("Position");

        jLabel8.setText("E-Mail");

        jLabel3.setText("Staff ID");

        deleteBtn5.setText("Delete");
        deleteBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtn5ActionPerformed(evt);
            }
        });

        newBtn5.setText("Reset");
        newBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtn5ActionPerformed(evt);
            }
        });

        addBtn5.setText("Add");
        addBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtn5ActionPerformed(evt);
            }
        });

        updateBtn5.setText("Update");
        updateBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtn5ActionPerformed(evt);
            }
        });

        printBtn.setText("Print");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(printBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn5)
                    .addComponent(updateBtn5)
                    .addComponent(deleteBtn5)
                    .addComponent(newBtn5)
                    .addComponent(printBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        changeImage.setText("Change Image");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(changeImage)
                .addGap(57, 57, 57))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(changeImage)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel23Layout.createSequentialGroup()
                                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(staffLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                    .addComponent(staffFirstName)))
                            .addGroup(jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(staffID))
                            .addGroup(jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(staffGender, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(staffMobile))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(staffEmail))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel23Layout.createSequentialGroup()
                                    .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(staffAdd)
                                        .addComponent(dateOfJoinStaff, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
                                .addGroup(jPanel23Layout.createSequentialGroup()
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(staffPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(staffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(staffMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(staffGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(staffEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(staffFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(staffLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(staffAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(dateOfJoinStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staffPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N

        searchStaff.setText("Search...");
        searchStaff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchStaffKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchStaffKeyReleased(evt);
            }
        });

        searchStaffBtn.setText("Search");
        searchStaffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStaffBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchStaffBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchStaffBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Staff Info Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 255))); // NOI18N

        staffInfoTable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N
        staffInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        staffInfoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffInfoTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(staffInfoTable);

        showAllStaff.setText("Show All");
        showAllStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllStaffActionPerformed(evt);
            }
        });

        print1.setText("Print");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showAllStaff)
                .addGap(36, 36, 36)
                .addComponent(print1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(301, 301, 301))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showAllStaff)
                    .addComponent(print1))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(270, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane5.addTab("Staff", jPanel4);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N

        searchStudent.setText("Search...");
        searchStudent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchStudentKeyReleased(evt);
            }
        });

        studentSearchBtn.setText("Search");
        studentSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(studentSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentSearchBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Students Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel19.setText("Date Of Birth");

        jLabel17.setText("E-Mail");

        jLabel18.setText("Address");

        jLabel12.setText("Student ID");

        jLabel14.setText("First Name");

        jLabel15.setText("Last Name");

        jLabel20.setText("Date Of Join");

        studentGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Female", "Male" }));

        jLabel16.setText("Mobile");

        jLabel13.setText("Gender");

        studentDeleteBtn.setText("Delete");
        studentDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDeleteBtnActionPerformed(evt);
            }
        });

        studentSaveBtn.setText("Add");
        studentSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSaveBtnActionPerformed(evt);
            }
        });

        studentNewBtn.setText("Reset");
        studentNewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentNewBtnActionPerformed(evt);
            }
        });

        printBtn1.setText("Print");

        studentUpdateBtn.setText("Update");
        studentUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentUpdateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(studentDeleteBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(studentUpdateBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(studentNewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentSaveBtn)
                .addGap(18, 18, 18)
                .addComponent(studentUpdateBtn)
                .addGap(18, 18, 18)
                .addComponent(studentDeleteBtn)
                .addGap(18, 18, 18)
                .addComponent(studentNewBtn)
                .addGap(18, 18, 18)
                .addComponent(printBtn1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(studentMobile))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(studentLastName)
                            .addComponent(studentGender, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentId)
                            .addComponent(studentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentAddress)
                    .addComponent(studentEmail)
                    .addComponent(dateOfJoinStudent, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(dateOfBirthStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(292, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(studentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(studentGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addComponent(studentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(studentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(studentLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(studentMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(studentEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19)
                            .addComponent(dateOfBirthStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(dateOfJoinStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Students Info Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N

        StudentsInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(StudentsInfoTable);

        showAllStudents.setText("Show All");
        showAllStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllStudentsActionPerformed(evt);
            }
        });

        print.setText("Print");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(showAllStudents)
                        .addGap(35, 35, 35)
                        .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showAllStudents)
                    .addComponent(print)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane5.addTab("Students", jPanel5);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add New User", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N

        jLabel30.setText("Password");

        jLabel29.setText("User Name");

        jLabel31.setText("Confirm Password");

        addUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserNameActionPerformed(evt);
            }
        });

        addUserBtn.setText("Add");
        addUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(addUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addUserPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addUserConfirmPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addUserName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(addUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(addUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel30)))
                .addGap(12, 12, 12)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addUserConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addUserBtn)
                    .addComponent(resetBtn))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search User Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N

        jLabel32.setText("User Name");

        searchPassBtn.setText("Search");
        searchPassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPassBtnActionPerformed(evt);
            }
        });

        jLabel33.setText("To search User password enter User Name");

        userNameSearch.setText("Search...");
        userNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel32)
                .addGap(28, 28, 28)
                .addComponent(userNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchPassBtn)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchPassBtn)
                    .addComponent(userNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Info Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N

        userInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        userInfoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userInfoTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(userInfoTable);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Delete User", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel34.setText("To delete user please enter user name");

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel35.setText("User Name");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel34))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(deleteUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(deleteBtn)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel34)
                .addGap(34, 34, 34)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(deleteUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Change User Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel21.setText("User Name");

        jLabel22.setText("Old Password");

        jLabel23.setText("Confirm Password");

        updatePass.setText("Update");
        updatePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePassActionPerformed(evt);
            }
        });

        jLabel24.setText("New Password");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userNametxt, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(userOldPassword)
                    .addComponent(userNewPassword)
                    .addComponent(userConfirmPassword))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(updatePass, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(userNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(userOldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(userNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(userConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(updatePass)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(265, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(52, 52, 52))
        );

        jTabbedPane5.addTab("Users", jPanel13);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(201, 201, 201)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1314, 665));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtn5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_updateBtn5ActionPerformed

        String staffId = staffID.getText();
        String staffFN = staffFirstName.getText();
        String staffLN = staffLastName.getText();
        String staffAddress = staffAdd.getText();
        String staffG = staffGender.getSelectedItem().toString();
        // i try to use getDate(), but is not working with mysql date col
        Date dateOfJStaff = dateOfJoinStaff.getDate(); 
        String staffP = staffPosition.getSelectedItem().toString();
        String staffM = staffMobile.getText();
        String staffEm = staffEmail.getText();

        if (staffId.equals("") || staffFN.equals("") || staffLN.equals("") || staffAddress.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all required fields!");

        } else if (staffG.equals("Choose")) {
            JOptionPane.showMessageDialog(null, "Please choose staff gender!");

        }/* else if (dateOfJStaff.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter date of join!");
        
        } */ else if (staffP.equals("Choose")) {
            JOptionPane.showConfirmDialog(null, "Please choose staff position!");

        } else if (staffM.equals("") && staffEm.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter mobile no. or E-Mail?!");

        } else {

            try {
                conn = Connect.connect();
                //checking if id is exist
                String checkId = "SELECT staff_id FROM staff WHERE staff_id='" + staffId + "'";

                pst = conn.prepareStatement(checkId);
                result = pst.executeQuery();
                if (!result.next()) {
                    JOptionPane.showMessageDialog(null, "Staff ID not exists!");
                    return;
                }

                //updating staff info
                String update = "UPDATE staff SET gender='" + staffG + "', first_name='" + staffFN + "',"
                        + "last_name='" + staffLN + "',mobile='" + staffM + "',email='" + staffEm + "',"
                        + "address='" + staffAddress + "', date_of_join='" + dateOfJStaff + "',  "
                        + "position='" + staffP + "',staff_id='" + staffId + "' WHERE staff_id='" + staffId + "' ";

                pst = conn.prepareStatement(update);
                // pst.setBytes(1, by);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Staff info updated!");

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_updateBtn5ActionPerformed

    private void addBtn5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addBtn5ActionPerformed

        String staffId = staffID.getText();
        String staffFN = staffFirstName.getText();
        String staffLN = staffLastName.getText();
        String staffAddress = staffAdd.getText();
        String staffG = staffGender.getSelectedItem().toString();
        // i try to use getDate(), but is not working with mysql date col
        Date dateOfJStaff = dateOfJoinStaff.getDate();
        String staffP = staffPosition.getSelectedItem().toString();
        String staffM = staffMobile.getText();
        String staffEm = staffEmail.getText();

        if (staffId.equals("") || staffFN.equals("") || staffLN.equals("") || staffAddress.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all requiered fields!");

        } else if (staffG.equals("Choose")) {
            JOptionPane.showMessageDialog(null, "Please choose staff gender!");

        } else if (dateOfJStaff.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter date of join!");

        } else if (staffP.equals("Choose")) {
            JOptionPane.showMessageDialog(null, "Please choose staff position!");

        } else if (staffM.equals("") && staffEm.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter mobile no. or E-Mail?!");

        } else {
            try {
                //connect db
                conn = Connect.connect();
                //checking if id is exist

                String checkId = "SELECT staff_id FROM staff WHERE staff_id='" + staffId + "'";
                if (conn != null) {
                    pst = conn.prepareStatement(checkId);
                    result = pst.executeQuery();
                    if (result.next()) {
                        JOptionPane.showMessageDialog(null, "Staff ID already exist! Please choose another id!");
                        return;
                    }

                    //inserting data
                    String add = "INSERT INTO staff(staff_id, gender,first_name,last_name,mobile,email,address,date_of_join,"
                            + "position) VALUES('" + staffId + "','" + staffG + "','" + staffFN + "','" + staffLN + "',"
                            + "'" + staffM + "','" + staffEm + "','" + staffAddress + "','" + dateOfJStaff + "',  "
                            + "'" + staffP + "');";
                    pst = conn.prepareStatement(add);
                    //pst.setBytes(1, by);
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "New staff added seccessfuly!");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        resetStaff();
    }//GEN-LAST:event_addBtn5ActionPerformed

    private void newBtn5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newBtn5ActionPerformed
        resetStaff();
    }//GEN-LAST:event_newBtn5ActionPerformed

    private void deleteBtn5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteBtn5ActionPerformed
        String staffId = staffID.getText();

        try {
            //connect db
            conn = Connect.connect();

            if (conn != null) {

                String add = "DELETE FROM staff WHERE staff_id='" + staffId + "' ";
                pst = conn.prepareStatement(add);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Staff seccessfuly deleted!");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        resetStaff();
    }//GEN-LAST:event_deleteBtn5ActionPerformed

    private void studentDeleteBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_studentDeleteBtnActionPerformed

    }//GEN-LAST:event_studentDeleteBtnActionPerformed

    private void studentUpdateBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_studentUpdateBtnActionPerformed

        String studentID = studentId.getText();
        String studentFN = studentFirstName.getText();
        String studentLN = studentLastName.getText();
        String studentAdd = studentAddress.getText();
        String studentG = studentGender.getSelectedItem().toString();
        // i try to use getDate(), but is not working with mysql date col
        Date studentBD = dateOfBirthStudent.getDate();
        Date dateOfJStudent = dateOfJoinStudent.getDate();
        String studentM = studentMobile.getText();
        String studentEm = studentEmail.getText();

        if (studentID.equals("") || studentFN.equals("") || studentLN.equals("") || studentAdd.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all required fields!");

        } else if (studentBD.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter date of Birth!");

        } else if (dateOfJStudent.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter date of join!");

        } else {

            try {
                conn = Connect.connect();
                //checking if id is exist
                String checkId = "SELECT student_id FROM students WHERE student_id='" + studentID + "'";

                pst = conn.prepareStatement(checkId);
                result = pst.executeQuery();
                if (!result.next()) {
                    JOptionPane.showMessageDialog(null, "Student ID not exists!");
                    return;
                }

                //updating Student info
                String update = "UPDATE students SET student_id='" + studentID + "', gender='" + studentG + "', "
                        + "first_name='" + studentFN + "',last_name='" + studentLN + "',mobile='" + studentM + "',"
                        + "email='" + studentEm + "',address='" + studentAdd + "', date_of_join='" + dateOfJStudent + "',"
                        + "  date_of_join='" + studentBD + "' WHERE student_id='" + studentID + "' ";

                pst = conn.prepareStatement(update);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Student info updated!");

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        //reset();
    }//GEN-LAST:event_studentUpdateBtnActionPerformed

    private void studentSaveBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_studentSaveBtnActionPerformed

        String studentID = studentId.getText();
        String studentFN = studentFirstName.getText();
        String studentLN = studentLastName.getText();
        String studentAdd = studentAddress.getText();
        String studentG = studentGender.getSelectedItem().toString();
        // i try to use getDate(), but is not working with mysql date col
        Date studentBD = dateOfBirthStudent.getDate();
        Date dateOfJStudent = dateOfJoinStudent.getDate();
        String studentM = studentMobile.getText();
        String studentEm = studentEmail.getText();

        if (studentID.equals("") || studentFN.equals("") || studentLN.equals("") || studentAdd.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all requered fields!");

        } /*else if (studentBD.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter date of Birth!");
        
        } else if (dateOfJStudent.equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter date of join!");
        
        }*/ else {

            try {
                //connect db
                conn = Connect.connect();
                //checking if id is exist
                String checkId = "SELECT student_id FROM students WHERE student_id='" + studentID + "'";

                pst = conn.prepareStatement(checkId);
                result = pst.executeQuery();
                if (result.next()) {
                    JOptionPane.showMessageDialog(null, "Student ID already exist! Please choose another id!");
                    return;
                }

                //inserting data
                String addStudent = "INSERT INTO students(student_id,gender,first_name,last_name,mobile,email,"
                        + "address,date_of_birth,date_of_join) VALUES('" + studentID + "',"
                        + "'" + studentG + "','" + studentFN + "','" + studentLN + "','" + studentM + "',"
                        + "'" + studentEm + "','" + studentAdd + "','" + studentBD + "', '" + dateOfJStudent + "' )";
                pst = conn.prepareStatement(addStudent);
                pst.execute();
                JOptionPane.showMessageDialog(null, "New student seccessfuly added!");

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        resetStudents();
    }//GEN-LAST:event_studentSaveBtnActionPerformed

    private void studentNewBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_studentNewBtnActionPerformed
        resetStudents();
    }//GEN-LAST:event_studentNewBtnActionPerformed

    private void studentSearchBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_studentSearchBtnActionPerformed

    }//GEN-LAST:event_studentSearchBtnActionPerformed

    private void addUserNameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addUserNameActionPerformed

    }//GEN-LAST:event_addUserNameActionPerformed

    private void addUserBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addUserBtnActionPerformed

        String userName = addUserName.getText();
        String password = String.valueOf(addUserPassword.getPassword());
        String confirmPassword = String.valueOf(addUserConfirmPassword.getPassword());

        if (userName.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter username!");
        } else if (password.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter user password!");
        } else if (confirmPassword.equals("")) {
            JOptionPane.showMessageDialog(null, "Please conirm password!");
        } else if (!confirmPassword.equals(password)) {
            JOptionPane.showMessageDialog(null, "Password dosen't match!");
        } else if (password.length() < 6 || password.length() > 32) {
            JOptionPane.showMessageDialog(null, "Password must be between 6-32 charachters!");
        } else {

            try {
                conn = Connect.connect();
                String checkUser = " SELECT username FROM users WHERE username='" + userName + "' ";
                pst = conn.prepareStatement(checkUser);
                result = pst.executeQuery();
                if (result.next()) {
                    JOptionPane.showMessageDialog(null, "User name exist! Choose another one!");
                    return;
                }
                String sql = " INSERT INTO users(username,userpass) VALUES ('" + userName + "','" + password + "' ) ";

                pst = conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "User Added!");
                //reset();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_addUserBtnActionPerformed

    private void resetBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        //reset();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void searchPassBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_searchPassBtnActionPerformed

        String userNSearch = userNameSearch.getText();
        try {
            conn = Connect.connect();
            String checkUserName = "SELECT username FROM users WHERE username='" + userNSearch + "'";
            pst = conn.prepareStatement(checkUserName);
            result = pst.executeQuery();
            if (!result.next()) {

                JOptionPane.showMessageDialog(null, "User name dosen't exist!");

            } else {

                String checkPass = "SELECT * FROM users WHERE username='" + userNSearch + "'";
                pst = conn.prepareStatement(checkPass);
                result = pst.executeQuery();

                userInfoTable.setModel(DbUtils.resultSetToTableModel(result));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchPassBtnActionPerformed

    private void deleteBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        String deleteUser = deleteUserName.getText();

        if (deleteUserName.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter user name!");
        } else {
            //checking if id is exist
            try {
                //connect db
                conn = Connect.connect();
                String checkName = "SELECT username FROM users WHERE username='" + deleteUser + "'";
                pst = conn.prepareStatement(checkName);
                result = pst.executeQuery();

                if (!result.next()) {
                    JOptionPane.showMessageDialog(null, "Username not exist!");
                    return;
                }

                //confirm delete
                int confirmDelete = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirm", JOptionPane.YES_NO_OPTION);

                if (confirmDelete == 0) {

                    String deleteStaff = "DELETE FROM users WHERE username='" + deleteUser + "' ";
                    pst = conn.prepareStatement(deleteStaff);
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "User seccessfuly deleted!!");

                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            //reset();
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void userNameSearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_userNameSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameSearchActionPerformed

    private void staffInfoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffInfoTableMouseClicked
        int row = staffInfoTable.getSelectedRow();
        String n = staffInfoTable.getModel().getValueAt(row, 0).toString();

        try {
            conn = Connect.connect();
            String getTableData = "SELECT * From staff WHERE staff_id='" + n + "' ";
            pst = conn.prepareStatement(getTableData);
            result = pst.executeQuery();

            if (result.next()) {

                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);

                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_staffInfoTableMouseClicked

    private void searchStaffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStaffBtnActionPerformed

    }//GEN-LAST:event_searchStaffBtnActionPerformed

    private void searchStaffKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStaffKeyReleased
        if (searchStaff.getText().equals("")) {
            resetStaff();

        }
        //search by id
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE staff_id=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

                //fill out staffInfoTable
                String sql2 = "SELECT * From staff WHERE staff_id=? ";
                pst = conn.prepareStatement(sql2);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();
                staffInfoTable.setModel(DbUtils.resultSetToTableModel(result));

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //search by fn
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE first_name=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        //search by ln
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE last_name=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //search by mobile
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE mobile=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        //search by email
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE email=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //search by position
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE position=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchStaffKeyReleased

    private void searchStaffKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStaffKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            //search by id
            try {
                conn = Connect.connect();
                String sql = "SELECT * From staff WHERE staff_id=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();

                if (result.next()) {
                    String add1 = result.getString("staff_id");
                    staffID.setText(add1);
                    String add2 = result.getString("gender");
                    staffGender.setSelectedItem(add2);
                    String add3 = result.getString("first_name");
                    staffFirstName.setText(add3);
                    String add4 = result.getString("last_name");
                    staffLastName.setText(add4);
                    String add5 = result.getString("mobile");
                    staffMobile.setText(add5);
                    String add6 = result.getString("email");
                    staffEmail.setText(add6);
                    String add7 = result.getString("address");
                    staffAdd.setText(add7);
                    // i try to use getDate(), but is not working with mysql date col
                    Date add8 = result.getDate("date_of_join");
                    dateOfJoinStaff.setDate(add8);
                    String add9 = result.getString("position");
                    staffPosition.setSelectedItem(add9);

                }

            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            //search by fn
            try {
                conn = Connect.connect();
                String sql = "SELECT * From staff WHERE first_name=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();

                if (result.next()) {
                    String add1 = result.getString("staff_id");
                    staffID.setText(add1);
                    String add2 = result.getString("gender");
                    staffGender.setSelectedItem(add2);
                    String add3 = result.getString("first_name");
                    staffFirstName.setText(add3);
                    String add4 = result.getString("last_name");
                    staffLastName.setText(add4);
                    String add5 = result.getString("mobile");
                    staffMobile.setText(add5);
                    String add6 = result.getString("email");
                    staffEmail.setText(add6);
                    String add7 = result.getString("address");
                    staffAdd.setText(add7);
                    // i try to use getDate(), but is not working with mysql date col
                    Date add8 = result.getDate("date_of_join");
                    dateOfJoinStaff.setDate(add8);
                    String add9 = result.getString("position");
                    staffPosition.setSelectedItem(add9);

                }

            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            //search by ln
            try {
                conn = Connect.connect();
                String sql = "SELECT * From staff WHERE last_name=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();

                if (result.next()) {
                    String add1 = result.getString("staff_id");
                    staffID.setText(add1);
                    String add2 = result.getString("gender");
                    staffGender.setSelectedItem(add2);
                    String add3 = result.getString("first_name");
                    staffFirstName.setText(add3);
                    String add4 = result.getString("last_name");
                    staffLastName.setText(add4);
                    String add5 = result.getString("mobile");
                    staffMobile.setText(add5);
                    String add6 = result.getString("email");
                    staffEmail.setText(add6);
                    String add7 = result.getString("address");
                    staffAdd.setText(add7);
                    // i try to use getDate(), but is not working with mysql date col
                    Date add8 = result.getDate("date_of_join");
                    dateOfJoinStaff.setDate(add8);
                    String add9 = result.getString("position");
                    staffPosition.setSelectedItem(add9);

                }

            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

            //search by mobile
            try {
                conn = Connect.connect();
                String sql = "SELECT * From staff WHERE mobile=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();

                if (result.next()) {
                    String add1 = result.getString("staff_id");
                    staffID.setText(add1);
                    String add2 = result.getString("gender");
                    staffGender.setSelectedItem(add2);
                    String add3 = result.getString("first_name");
                    staffFirstName.setText(add3);
                    String add4 = result.getString("last_name");
                    staffLastName.setText(add4);
                    String add5 = result.getString("mobile");
                    staffMobile.setText(add5);
                    String add6 = result.getString("email");
                    staffEmail.setText(add6);
                    String add7 = result.getString("address");
                    staffAdd.setText(add7);
                    // i try to use getDate(), but is not working with mysql date col
                    Date add8 = result.getDate("date_of_join");
                    dateOfJoinStaff.setDate(add8);
                    String add9 = result.getString("position");
                    staffPosition.setSelectedItem(add9);

                }

            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
            //search by email
            try {
                conn = Connect.connect();
                String sql = "SELECT * From staff WHERE email=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();

                if (result.next()) {
                    String add1 = result.getString("staff_id");
                    staffID.setText(add1);
                    String add2 = result.getString("gender");
                    staffGender.setSelectedItem(add2);
                    String add3 = result.getString("first_name");
                    staffFirstName.setText(add3);
                    String add4 = result.getString("last_name");
                    staffLastName.setText(add4);
                    String add5 = result.getString("mobile");
                    staffMobile.setText(add5);
                    String add6 = result.getString("email");
                    staffEmail.setText(add6);
                    String add7 = result.getString("address");
                    staffAdd.setText(add7);
                    // i try to use getDate(), but is not working with mysql date col
                    Date add8 = result.getDate("date_of_join");
                    dateOfJoinStaff.setDate(add8);
                    String add9 = result.getString("position");
                    staffPosition.setSelectedItem(add9);

                }

            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

            //search by position
            try {
                conn = Connect.connect();
                String sql = "SELECT * From staff WHERE position=? ";
                pst = conn.prepareStatement(sql);
                pst.setString(1, searchStaff.getText());
                result = pst.executeQuery();

                if (result.next()) {
                    String add1 = result.getString("staff_id");
                    staffID.setText(add1);
                    String add2 = result.getString("gender");
                    staffGender.setSelectedItem(add2);
                    String add3 = result.getString("first_name");
                    staffFirstName.setText(add3);
                    String add4 = result.getString("last_name");
                    staffLastName.setText(add4);
                    String add5 = result.getString("mobile");
                    staffMobile.setText(add5);
                    String add6 = result.getString("email");
                    staffEmail.setText(add6);
                    String add7 = result.getString("address");
                    staffAdd.setText(add7);
                    // i try to use getDate(), but is not working with mysql date col
                    Date add8 = result.getDate("date_of_join");
                    dateOfJoinStaff.setDate(add8);
                    String add9 = result.getString("position");
                    staffPosition.setSelectedItem(add9);

                }

            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_searchStaffKeyPressed

    private void updatePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePassActionPerformed

        String userName = userNametxt.getText();
        String oldPass = userOldPassword.getText();
        String newPass = userNewPassword.getText();
        String confirmPass = userConfirmPassword.getText();

        if (userName.equals("") || oldPass.equals("") || newPass.equals("") || confirmPass.equals("")) {
            JOptionPane.showMessageDialog(null, "All fields are requiered!");

        } else if (newPass.equals(oldPass)) {
            JOptionPane.showMessageDialog(null, "New password is the same as old one! please choose onther password");
        } else if (!confirmPass.equals(newPass)) {
            JOptionPane.showMessageDialog(null, "The two Passwords don't match!");
        } else if (newPass.length() < 6 || newPass.length() > 32) {
            JOptionPane.showMessageDialog(null, "Password must be between 6-32 charachters!");
        } else {

            try {
                conn = Connect.connect();
                String checkEntry = "SELECT username,userpass FROM users WHERE username='" + userName + "' AND userpass='" + oldPass + "'";

                pst = conn.prepareStatement(checkEntry);
                result = pst.executeQuery();

                if (result.next()) {
                    String sqlUserName = result.getString("username");
                    String sqlUserPass = result.getString("userpass");

                    if (sqlUserName.equals(userName) && sqlUserPass.equals(oldPass)) {

                        String updatePassword = "UPDATE users SET userpass='" + newPass + "' WHERE username='" + userName + "' ";
                        pst = conn.prepareStatement(updatePassword);
                        pst.execute();
                        JOptionPane.showMessageDialog(null, "User password updated!");

                    } else {

                        JOptionPane.showMessageDialog(null, "Wrong user name or password!");
                        return;
                    }

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());

            }

        }
    }//GEN-LAST:event_updatePassActionPerformed

    private void userInfoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userInfoTableMouseClicked
        int row = userInfoTable.getSelectedRow();
        String n = userInfoTable.getModel().getValueAt(row, 0).toString();

        try {
            conn = Connect.connect();
            String getTableData = "SELECT * FROM users WHERE username='" + n + "' ";
            pst = conn.prepareStatement(getTableData);
            result = pst.executeQuery();

            if (result.next()) {

                String userName = result.getString("username");
                addUserName.setText(userName);

                String userPass = result.getString("userpass");
                addUserPassword.setText(userPass);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_userInfoTableMouseClicked

    private void searchStudentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStudentKeyReleased
        if (searchStudent.getText().equals("")) {
            resetStudents();

        }
        //search by id
        try {
            conn = Connect.connect();
            String sql = "SELECT * From students WHERE student_id=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStudent.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("student_id");
                studentId.setText(add1);
                String add2 = result.getString("gender");
                studentGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                studentFirstName.setText(add3);
                String add4 = result.getString("last_name");
                studentLastName.setText(add4);
                String add5 = result.getString("mobile");
                studentMobile.setText(add5);
                String add6 = result.getString("email");
                studentEmail.setText(add6);
                String add7 = result.getString("address");
                studentAddress.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_birth");
                dateOfBirthStudent.setDate(add8);
                Date add9 = result.getDate("date_of_join");
                dateOfJoinStudent.setDate(add9);

                //fill out staffInfoTable
                String sql2 = "SELECT * From students WHERE student_id=? ";
                pst = conn.prepareStatement(sql2);
                pst.setString(1, searchStudent.getText());
                result = pst.executeQuery();
                StudentsInfoTable.setModel(DbUtils.resultSetToTableModel(result));

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //search by fn
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE first_name=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        //search by ln
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE last_name=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //search by mobile
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE mobile=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        //search by email
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE email=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        //search by position
        try {
            conn = Connect.connect();
            String sql = "SELECT * From staff WHERE position=? ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, searchStaff.getText());
            result = pst.executeQuery();

            if (result.next()) {
                String add1 = result.getString("staff_id");
                staffID.setText(add1);
                String add2 = result.getString("gender");
                staffGender.setSelectedItem(add2);
                String add3 = result.getString("first_name");
                staffFirstName.setText(add3);
                String add4 = result.getString("last_name");
                staffLastName.setText(add4);
                String add5 = result.getString("mobile");
                staffMobile.setText(add5);
                String add6 = result.getString("email");
                staffEmail.setText(add6);
                String add7 = result.getString("address");
                staffAdd.setText(add7);
                // i try to use getDate(), but is not working with mysql date col
                Date add8 = result.getDate("date_of_join");
                dateOfJoinStaff.setDate(add8);
                String add9 = result.getString("position");
                staffPosition.setSelectedItem(add9);

            }

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchStudentKeyReleased

    private void showAllStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllStudentsActionPerformed
        try {

            conn = Connect.connect();
            String sql = "SELECT * FROM Students";
            pst = conn.prepareStatement(sql);
            result = pst.executeQuery();
            if (result.next()) {
                StudentsInfoTable.setModel(DbUtils.resultSetToTableModel(result));

            } else {
                JOptionPane.showMessageDialog(null, "Nothing to show");

            }

        } catch (SQLException | ClassNotFoundException ex) {

            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_showAllStudentsActionPerformed

    private void showAllStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllStaffActionPerformed
 try {

            conn = Connect.connect();
            String sql = "SELECT * FROM staff";
            pst = conn.prepareStatement(sql);
            result = pst.executeQuery();
            if (result.next()) {
                staffInfoTable.setModel(DbUtils.resultSetToTableModel(result));

            } else {
                JOptionPane.showMessageDialog(null, "Nothing to show");

            }

        } catch (SQLException | ClassNotFoundException ex) {

            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);

        }        
    }//GEN-LAST:event_showAllStaffActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable StudentsInfoTable;
    private javax.swing.JButton addBtn5;
    private javax.swing.JButton addUserBtn;
    private javax.swing.JPasswordField addUserConfirmPassword;
    private javax.swing.JTextField addUserName;
    private javax.swing.JPasswordField addUserPassword;
    private javax.swing.JButton changeImage;
    private com.toedter.calendar.JDateChooser dateOfBirthStudent;
    private com.toedter.calendar.JDateChooser dateOfJoinStaff;
    private com.toedter.calendar.JDateChooser dateOfJoinStudent;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton deleteBtn5;
    private javax.swing.JTextField deleteUserName;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton newBtn5;
    private javax.swing.JButton print;
    private javax.swing.JButton print1;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton printBtn1;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton searchPassBtn;
    private javax.swing.JTextField searchStaff;
    private javax.swing.JButton searchStaffBtn;
    private javax.swing.JTextField searchStudent;
    private javax.swing.JButton showAllStaff;
    private javax.swing.JButton showAllStudents;
    protected javax.swing.JTextField staffAdd;
    protected javax.swing.JTextField staffEmail;
    protected javax.swing.JTextField staffFirstName;
    protected javax.swing.JComboBox<String> staffGender;
    protected javax.swing.JTextField staffID;
    private javax.swing.JTable staffInfoTable;
    protected javax.swing.JTextField staffLastName;
    protected javax.swing.JTextField staffMobile;
    protected javax.swing.JComboBox<String> staffPosition;
    protected javax.swing.JTextField studentAddress;
    private javax.swing.JButton studentDeleteBtn;
    protected javax.swing.JTextField studentEmail;
    protected javax.swing.JTextField studentFirstName;
    protected javax.swing.JComboBox<String> studentGender;
    protected javax.swing.JTextField studentId;
    protected javax.swing.JTextField studentLastName;
    protected javax.swing.JTextField studentMobile;
    private javax.swing.JButton studentNewBtn;
    private javax.swing.JButton studentSaveBtn;
    private javax.swing.JButton studentSearchBtn;
    private javax.swing.JButton studentUpdateBtn;
    private javax.swing.JButton updateBtn5;
    private javax.swing.JButton updatePass;
    protected javax.swing.JTextField userConfirmPassword;
    private javax.swing.JTable userInfoTable;
    private javax.swing.JTextField userNameSearch;
    protected javax.swing.JTextField userNametxt;
    protected javax.swing.JTextField userNewPassword;
    protected javax.swing.JTextField userOldPassword;
    // End of variables declaration//GEN-END:variables
}
